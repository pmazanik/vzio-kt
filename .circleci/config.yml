version: 2.1

parameters:
  service-id:
    type: string
    default: consent-management-service
  # EPAM single account for all environments
  int-dev-role-arn:
    type: string
    default: "arn:aws:iam::217687602046:role/cicd"
  int-staging-role-arn:
    type: string
    default: "arn:aws:iam::217687602046:role/cicd"
  int-prod-role-arn:
    type: string
    default: "arn:aws:iam::217687602046:role/cicd"
  int-v1-role-arn:
    type: string
    default: "arn:aws:iam::217687602046:role/cicd"

orbs:
  aws-cli: circleci/aws-cli@1.3.0

executors:
  node:
    docker:
      - image: circleci/node:14
    working_directory: ~/workspace

  terraform:
    docker:
      - image: hashicorp/terraform:0.13.4
    working_directory: ~/workspace

commands:
  slack_dummy:
      - run: echo "Slack time. Using context VAR - ${SLACK_ID}"

  prepare_slack:
    description: "Prepare Alpine containers for slack notification by installing bash/curl"
    steps:
      - run: apk add --no-cache bash curl

  configure_environment:
    description: Configure environment variables shared across the workflow
    steps:
      - checkout
      - run: mkdir -p ./workspace
      - run:
          name: Fetch GitHub credentials
          command: |
            GITHUB_AUTH=$(aws secretsmanager get-secret-value --secret-id ci/consent-management-service/github)
            GITHUB_TOKEN=$(echo $GITHUB_AUTH | jq -r '.SecretString | fromjson | .access_token')
            echo "export GITHUB_TOKEN=${GITHUB_TOKEN}" >> ./workspace/env.sh

      - run:
          name: Create BUILD_VERSION
          command: echo $(python ./tools/generate-build-version.py) >> ./workspace/env.sh
          environment:
            PIPELINE_NUMBER: <<pipeline.number>>

      - persist_to_workspace:
          root: workspace
          paths:
            - env.sh

  prepare_job:
    description: Runs checkout, attach_workspace, and loads shared environment variables
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Create environment variables from Terraform output
          command: |
            if [ -f "./workspace/output.json" ]; then
              echo $(python ./tools/generete-tf-output-as-env-variables.py) >> ./workspace/env.sh
              cat ./workspace/env.sh
            fi
      - run:
          name: Load workflow environment variables
          command: cat ./workspace/env.sh >> $BASH_ENV

  install_dependencies:
    description: "restore_cache, npm ci, save_cache"
    steps:
      - restore_cache:
          key: npm-cache-{{ checksum "package-lock.json" }}
      - run: |
          rm -rf node_modules
          npm install
      - save_cache:
          key: npm-cache-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm

  assume_role:
    description: "Assume role in target service account"
    parameters:
      role_arn:
        type: string
    steps:
      - run:
          name: Assume Role
          command: |
            ROLE_JSON=$(aws sts assume-role --role-arn "<< parameters.role_arn >>" --role-session-name "circleci-deployment-session")
            ROLE_ACCESS_KEY_ID=$(echo $ROLE_JSON | jq -r '.Credentials.AccessKeyId')
            ROLE_SECRET_ACCESS_KEY=$(echo $ROLE_JSON | jq -r '.Credentials.SecretAccessKey')
            ROLE_SESSION_TOKEN=$(echo $ROLE_JSON | jq -r '.Credentials.SessionToken')
            echo "export AWS_ACCESS_KEY_ID=${ROLE_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${ROLE_SECRET_ACCESS_KEY}" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=${ROLE_SESSION_TOKEN}" >> $BASH_ENV

  terraform_init:
    steps:
      - run:
          name: Initialize Terraform
          working_directory: terraform
          command: |
            terraform init -input=false \
              -backend-config="bucket=$TF_STATE_BUCKET" \
              -backend-config="region=$TF_STATE_BUCKET_REGION" \
              -backend-config="key=${STAGE}/<< pipeline.parameters.service-id >>/terraform.tfstate" \
              -force-copy

  terraform_plan:
    parameters:
      role_arn:
        type: string
    steps:
      - run: mkdir -p workspace
      - run:
          name: Plan Terraform changes
          command: terraform plan -input=false -var-file="stages/${STAGE}.tfvars" -out ../workspace/.tfplan
          working_directory: terraform
          environment:
            TF_VAR_service_role_arn: << parameters.role_arn >>
      - persist_to_workspace:
          root: workspace
          paths:
            - .tfplan

  terraform_apply:
    steps:
      - attach_workspace:
          at: workspace
      - run:
          name: Apply Terraform changes
          working_directory: terraform
          command: |
            terraform apply -auto-approve ../workspace/.tfplan
            terraform output -json > ../workspace/output.json
      - persist_to_workspace:
          root: workspace
          paths:
            - output.json

jobs:
  init_workflow:
    parameters:
      stage:
        type: string
        default: "dev"
    environment:
      STAGE: << parameters.stage >>
    executor: node
    steps:
      - aws-cli/setup
      - configure_environment
      - slack_dummy
      #- slack/status:
      #    fail_only: true

  test:
    executor: node
    steps:
      - prepare_job
      - install_dependencies
      - run: npm audit --production || echo 'NPM Audit failed'
      - run: npm run lint
      - run:
          name: Run Tests
          no_output_timeout: 1m
          command: npm run test
      - slack_dummy
      #- slack/status:
      #    fail_only: true

  package_service-feature_branch:
    executor: node
    description: "Packages the service from a feature branch"
    parameters:
      stage:
        type: string
        default: "dev"
    steps:
      - prepare_job
      - install_dependencies
      - run:
          command: npm run package -- --verbose --package ./package/<< parameters.stage >>/
          environment:
            STAGE: << parameters.stage >>
            REGION: us-east-1
            SERVERLESS_DEPLOYMENT_BUCKET: << pipeline.parameters.service-id >>-<< parameters.stage >>

  package_service:
    executor: node
    description: "Packages the service with stage"
    parameters:
      stage:
        type: string
        default: "dev"
      prerelease:
        type: string
        default: "true"
    steps:
      - prepare_job
      - install_dependencies
      - run:
          command: npm run package -- --verbose --package ./package/<< parameters.stage >>/
          environment:
            STAGE: << parameters.stage >>
            REGION: us-east-1
            SERVERLESS_DEPLOYMENT_BUCKET: << pipeline.parameters.service-id >>-<< parameters.stage >>
      - run: mkdir -p workspace artifacts
      - run: cp -r package workspace/
      - run:
          name: Add fulfillment package to /artifacts
          command: tar -zcvf ./artifacts/<< parameters.stage >>_${BUILD_VERSION}.zip ./workspace/package/<< parameters.stage >>
      - run:
          name: Create GitHub release and upload artifact
          command: ./tools/create-github-release.sh ./artifacts/<< parameters.stage >>_${BUILD_VERSION}.zip << parameters.prerelease >>
      - store_artifacts:
          path: artifacts
      - persist_to_workspace:
          root: workspace
          paths:
            - package
      - slack_dummy
      #- slack/status:
      #    fail_only: true

  deploy_service:
    executor: node
    description: "Deploys the service with stage"
    parameters:
      stage:
        type: string
        default: dev
      region:
        type: string
        default: us-east-1
      role_arn:
        type: string
    steps:
      - prepare_job
      - install_dependencies
      - aws-cli/setup
      - assume_role:
          role_arn: << parameters.role_arn >>
      - run:
          command: npm run deploy -- --package ./workspace/package/<< parameters.stage >>/
          environment:
            STAGE: << parameters.stage >>
            REGION: << parameters.region >>
            SERVERLESS_DEPLOYMENT_BUCKET: << pipeline.parameters.service-id >>-<< parameters.stage >>

  workflow_success:
    executor: node
    steps:
      - slack_dummy
      #- slack/status

  terraform_plan:
    executor: terraform
    parameters:
      stage:
        type: string
      region:
        type: string
        default: us-east-1
      role_arn:
        type: string
    environment:
      STAGE: << parameters.stage >>
      REGION: << parameters.region >>
    steps:
      - slack_dummy
      #- prepare_slack
      - prepare_job
      - terraform_init
      - terraform_plan:
          role_arn: << parameters.role_arn >>
      - slack_dummy
      #- slack/status:
      #    fail_only: true

  terraform_apply:
    executor: terraform
    parameters:
      stage:
        type: string
    environment:
      STAGE: << parameters.stage >>
    steps:
      - slack_dummy
      #- prepare_slack
      - checkout
      - terraform_init
      - terraform_apply
      - slack_dummy
      #- slack/status:
      #    fail_only: true

workflows:
  feature_branch:
    jobs:
      - init_workflow:
          context:
            - SLACK_CONTEXT
            - aws-vizio-privacy
          filters:
            branches:
              ignore:
                - dev
                - master

      - test:
          context:
            - SLACK_CONTEXT
            - aws-vizio-privacy
          requires:
            - init_workflow

      - package_service-feature_branch:
          requires:
            - test

      - workflow_success:
          name: worflow_finish_notification-feature_branch
          context:
            - SLACK_CONTEXT
            - aws-vizio-privacy
          requires:
            - package_service-feature_branch

  dev:
    jobs:
      - init_workflow:
          context:
            - SLACK_CONTEXT
            - aws-vizio-cms-dev
          stage: dev
          filters:
            branches:
              only: dev #Source git branch

      - test:
          context:
            - SLACK_CONTEXT
            - aws-vizio-cms-dev
          requires:
            - init_workflow

      - terraform_plan:
          name: terraform_plan-dev
          stage: dev
          role_arn: << pipeline.parameters.dev-role-arn >>
          context:
            - SLACK_CONTEXT
            - aws-vizio-cms-dev
          requires:
            - test

      - terraform_apply:
          name: terraform_apply-dev
          stage: dev
          context:
            - SLACK_CONTEXT
            - aws-vizio-cms-dev
          requires:
            - terraform_plan-dev

      - package_service:
          name: package_service-dev
          stage: dev
          context:
            - SLACK_CONTEXT
            - aws-vizio-cms-dev
          requires:
            - terraform_apply-dev

      - deploy_service:
          name: deploy_service-dev
          stage: dev
          role_arn: << pipeline.parameters.dev-role-arn >>
          context:
            - SLACK_CONTEXT
            - aws-vizio-cms-dev
          requires:
            - package_service-dev

      - workflow_success:
          name: worflow_finish_notification-dev
          requires:
            - deploy_service-dev